#!/usr/bin/env bash
set -e

###############################################################################
# Configuration
###############################################################################
# Path to your source code directory
SRC_ROOT="src"
SRC_COMPONENTS="${SRC_ROOT}/components"
SRC_API="${SRC_ROOT}/api"

# The build output directory where we'll stage code and dependencies
BUILD_DIR="build/lambda_code"

# The final zip name we'll create
ZIP_NAME="components_api.zip"

# Path to requirements.txt (generated by pigar)
REQ_FILE="requirement_lambda.txt"


###############################################################################
# 2. Clean old build artifacts
###############################################################################
echo "Cleaning old build artifacts..."
rm -rf "${BUILD_DIR}"
mkdir -p "${BUILD_DIR}"

###############################################################################
# 3. Copy the contents of src/components/ into build/lambda_code/src/components/
###############################################################################
echo "Copying all files from ${SRC_COMPONENTS}/ to ${BUILD_DIR}/src/components/, excluding __pycache__..."
mkdir -p "${BUILD_DIR}/src/components"
rsync -av --exclude '__pycache__/' "${SRC_COMPONENTS}/" "${BUILD_DIR}/src/components/"

###############################################################################
# 4. Copy the contents of src/api/ into build/lambda_code/src/api/
###############################################################################
echo "Copying all files from ${SRC_API}/ to ${BUILD_DIR}/src/api/, excluding __pycache__..."
mkdir -p "${BUILD_DIR}/src/api"
rsync -av --exclude '__pycache__/' "${SRC_API}/" "${BUILD_DIR}/src/api/"

###############################################################################
# 5. Install dependencies into the build folder (root of ZIP)
###############################################################################
if [ -f "${REQ_FILE}" ]; then
  echo "Installing Python dependencies from ${REQ_FILE} into build/lambda_code..."
  pip install --upgrade -r "${REQ_FILE}" -t "${BUILD_DIR}"
else
  echo "No requirements.txt found at ${REQ_FILE}. Skipping dependency installation."
fi

###############################################################################
# 6. Remove any leftover __pycache__
###############################################################################
echo "Removing any leftover __pycache__ directories..."
find "${BUILD_DIR}" -name "__pycache__" -type d -exec rm -rf {} +

###############################################################################
# 7. Create the final zip
###############################################################################
echo "Zipping build folder into ${ZIP_NAME}..."
cd "${BUILD_DIR}"
zip -r "${ZIP_NAME}" .
echo "Build complete. Final zip is at: $(pwd)/${ZIP_NAME}"